{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/setTimeout-vs-setImmedidate-vs-process.nextTick/",
    "result": {"data":{"cur":{"id":"0e578bc7-8dc8-54d2-bcad-9b474b496455","html":"<h1 id=\"-목표\" style=\"position:relative;\"><a href=\"#-%EB%AA%A9%ED%91%9C\" aria-label=\" 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 목표</h1>\n<p>동작을 지연시키는 것으로만 알고 있었던 이 세 가지 함수 <code class=\"language-text\">setTimeout()</code>, <code class=\"language-text\">setImmedidate()</code>, <code class=\"language-text\">process.nextTick()</code>에 대해 알아보고 실행 시점에 대한 차이를 간단하게나마 알아보고자 한다.</p>\n<br />\n<h1 id=\"-개념\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%85%90\" aria-label=\" 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📄 개념</h1>\n<p><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">Node.js 공식 문서</a>를 확인하면 정의는 아래와 같고, 나름대로 개념을 정리(<span style=\"color:grey\"><del>짜집기</del></span>)해보았다.</p>\n<br />\n<h2 id=\"1-settimeout\" style=\"position:relative;\"><a href=\"#1-settimeout\" aria-label=\"1 settimeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. setTimeout()</h2>\n<blockquote>\n<p><code class=\"language-text\">setTimeout()</code> schedules a script to be run after a minimum threshold in ms has elapsed.</p>\n</blockquote>\n<ul>\n<li><strong style=\"color:rgba(217, 115, 13, 1);\">지정된 시간(ms) 이후</strong>에 함수 또는 지정된 코드를 실행하는 타이머를 설정한다.</li>\n</ul>\n<br />\n<h2 id=\"2-setimmedidate\" style=\"position:relative;\"><a href=\"#2-setimmedidate\" aria-label=\"2 setimmedidate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. setImmedidate()</h2>\n<blockquote>\n<p><code class=\"language-text\">setImmediate()</code> is designed to execute a script once the current poll phase completes.</p>\n</blockquote>\n<ul>\n<li><strong style=\"color:rgba(217, 115, 13, 1);\">현재 폴링</strong> 단계가 완료되면 실행된다.</li>\n<li>작업을 비동기적으로 실행한다는 면에서는 process.nextTick()과 유사하지만, setImmedidate()는 이미 큐에 있는 <strong style=\"color:rgba(217, 115, 13, 1);\">I/O 이벤트들의 뒤에 대기</strong>하게 된다는 차이가 있다.</li>\n</ul>\n<br />\n<h2 id=\"3-processnexttick\" style=\"position:relative;\"><a href=\"#3-processnexttick\" aria-label=\"3 processnexttick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. process.nextTick()</h2>\n<blockquote>\n<p><code class=\"language-text\">process.nextTick()</code> fires immediately on the same phase.</p>\n</blockquote>\n<ul>\n<li>현재 진행 중인 작업의 완료 시점 뒤로 함수의 실행을 지연시킨다(즉, 같은 phase 내에서 즉시 실행된다).</li>\n<li>해당 함수로 지연된 콜백은 <strong style=\"color:rgba(144, 101, 176, 1);\">마이크로 태스크</strong>라고 불리며, 이미 큐에 있는 <strong style=\"color:rgba(217, 115, 13, 1);\">I/O 이벤트들 앞에 위치</strong>하게 되어 현재의 작업이 완료된 후에 바로 실행된다.</li>\n</ul>\n<br />\n<h1 id=\"-결론부터-간단하게\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0%EB%B6%80%ED%84%B0-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C\" aria-label=\" 결론부터 간단하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⛳ 결론부터 간단하게</h1>\n<ol>\n<li>일반적으로 <code class=\"language-text\">setTimeout(cb, 0)</code> &#x3C; <code class=\"language-text\">setImmediate()</code> &#x3C; <code class=\"language-text\">process.nextTick()</code> 순으로 먼저 실행된다.</li>\n<li><code class=\"language-text\">setTimeout(cb, 0)</code>, <code class=\"language-text\">setImmediate()</code>의 실행순서는 <strong style=\"color:rgba(217, 115, 13, 1);\">I/O 사이클 및 프로세스 성능</strong>에 따라 변할 수 있다.</li>\n<li><code class=\"language-text\">process.nextTick()</code>를 사용하면 현재 작업 바로 뒤로 지연되며, 해당 함수로 지연된 콜백은 <strong style=\"color:rgba(144, 101, 176, 1);\">마이크로 태스크</strong>라고 불린다.</li>\n</ol>\n<br />\n<h1 id=\"-코드로-확인해보자\" style=\"position:relative;\"><a href=\"#-%EC%BD%94%EB%93%9C%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\" 코드로 확인해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 코드로 확인해보자</h1>\n<br />\n<h2 id=\"1️⃣-settimeoutfunc-delay에서-delay가-0ms라고-0ms-후에-실행되지-않는다\" style=\"position:relative;\"><a href=\"#1%EF%B8%8F%E2%83%A3-settimeoutfunc-delay%EC%97%90%EC%84%9C-delay%EA%B0%80-0ms%EB%9D%BC%EA%B3%A0-0ms-%ED%9B%84%EC%97%90-%EC%8B%A4%ED%96%89%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"1️⃣ settimeoutfunc delay에서 delay가 0ms라고 0ms 후에 실행되지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1️⃣ setTimeout(func, delay)에서 delay가 0ms라고 0ms 후에 실행되지 않는다.</h2>\n<p>Node.js 소스의 <a href=\"https://github.com/nodejs/node/blob/master/lib/timers.js#L140\">node/lib/timers.js</a>를 살펴보면 <code class=\"language-text\">setTimeout()</code> 함수를 확인할 수 있고,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">const</span> timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">.</span>_idleTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> timeout<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이곳에서 사용된  <a href=\"https://github.com/nodejs/node/blob/b2edcfee46097fe8e0510a455b97d5c6d0cac5ec/lib/internal/timers.js#L167\">Timeout()</a>의 정의를 확인해보면 다음과 같이 정의되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> isRepeat<span class=\"token punctuation\">,</span> isRefed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  after <span class=\"token operator\">*=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Coalesce to number or NaN</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>after <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> after <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">TIMEOUT_MAX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>after <span class=\"token operator\">></span> <span class=\"token constant\">TIMEOUT_MAX</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      process<span class=\"token punctuation\">.</span><span class=\"token function\">emitWarning</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>after<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> does not fit into</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">' a 32-bit signed integer.'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'\\nTimeout duration was set to 1.'</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'TimeoutOverflowWarning'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    after <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Schedule on next tick, follows browser behavior</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, <strong style=\"color:rgba(217, 115, 13, 1);\">delay를 0ms으로 설정하여도 1ms로 설정되어 동작</strong>한다.</p>\n<br />\n<h2 id=\"2️⃣-settimeout-vs-setimmedidate\" style=\"position:relative;\"><a href=\"#2%EF%B8%8F%E2%83%A3-settimeout-vs-setimmedidate\" aria-label=\"2️⃣ settimeout vs setimmedidate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2️⃣ setTimeout() vs setImmedidate()</h2>\n<p><strong style=\"color:rgba(217, 115, 13, 1);\">I/O 사이클 내에 있지 않은</strong> 아래 스크립트를 실행하게 되면 두 타이머가 실행되는 순서는 <strong style=\"color:rgba(217, 115, 13, 1);\">프로세스의 성능</strong>에 의해 제한되기 때문에 <strong style=\"color:rgba(217, 115, 13, 1);\">결과가 일정하지 않다.</strong> 그 이유는 위에서 설명한 내용(<a href=\"#-개념\" style=\"color:grey\"><strong>개념</strong></a>)에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'immediate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output </span>\ntimeout\nimmediate\n\n<span class=\"token comment\">// Output </span>\nimmediate\ntimeout</code></pre></div>\n<p>하지만 <strong style=\"color:rgba(217, 115, 13, 1);\">I/O 사이클 내</strong>에 위치하게 되면 <strong style=\"color:rgba(217, 115, 13, 1);\">항상 setImmediate()가 먼저 실행</strong>된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'immediate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output </span>\nimmediate\ntimeout</code></pre></div>\n<br />\n<h2 id=\"3️⃣-settimeout-vs-setimmedidate\" style=\"position:relative;\"><a href=\"#3%EF%B8%8F%E2%83%A3-settimeout-vs-setimmedidate\" aria-label=\"3️⃣ settimeout vs setimmedidate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3️⃣ setTimeout() vs setImmedidate()</h2>\n<p>이미 개념 설명 부분에서 차이를 설명하였기에 누가 더 빠른 동작을 보일지 자명하지만, 코드로 확인해보기 위하여 <a href=\"https://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation\">스택오버플로우</a>에서 가져온 예시를 들어 살펴보도록 하자.</p>\n<h3 id=\"setimmediate\" style=\"position:relative;\"><a href=\"#setimmediate\" aria-label=\"setimmediate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setImmediate()</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TIMEOUT FIRED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 위에서 언급했다 시피, I/O 사이클 내에 있지 않으므로 실행할 때마다 결과가 달라질 것이다. */</span>\n<span class=\"token comment\">// TIMEOUT FIRED 1 4 2 3 5 6</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token comment\">// 1 4 TIMEOUT FIRED 2 3 5 6</span></code></pre></div>\n<h3 id=\"processnexttick\" style=\"position:relative;\"><a href=\"#processnexttick\" aria-label=\"processnexttick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>process.nextTick()</h3>\n<p><code class=\"language-text\">nextTick()</code> 콜백은 항상 현재 코드 실행이 완료된 직후와 이벤트 루프로 돌아가기 전에 실행되기 때문에 이벤트 루프 이후에 실행되는 <code class=\"language-text\">setTimeout()</code>의 콜백은 항상 마지막에 출력된다. 가령, <code class=\"language-text\">setTimeout()</code> 코드의 위치를 위로 올린다고 하여도 결과는 항상 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TIMEOUT FIRED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 항상 nextTick()의 결과가 먼저 출력된다. */</span>\n<span class=\"token comment\">// 1 4 2 3 5 6 TIMEOUT FIRED</span></code></pre></div>\n<p>위 비교로 알 수 있다 시피, <code class=\"language-text\">setTimeout()</code> 기준으로 항상 그 앞에서 실행되는 <code class=\"language-text\">process.nextTick()</code>은 <code class=\"language-text\">setImmediate()</code> 보다 먼저 실행된다는 것을 알 수 있다.</p>\n<br />\n<h1 id=\"참고한-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참고한 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 사이트</h1>\n<ol>\n<li><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">Node.js 공식 문서</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation\">StackOverFlow</a></li>\n<li><a href=\"https://medium.com/@rpf5573/nodejs-event-loop-part-2-settimeout-vs-setimmediate-vs-process-nexttick-70ba2a9f0895\">[NodeJS] Event-Loop Part 2 : setTimeout() vs setImmediate() vs process.nextTick()</a> - <strong>Byeongin Yoon</strong></li>\n</ol>\n<p style=\"color:grey\">그 외 참고한 블로그들이 더 있는데, 노션에 정리했던 부분을 블로그 글로 작성해본 것이여서 출처가 남아있지 않네요. 😭😭😭 </p>","excerpt":"🎯 목표 동작을 지연시키는 것으로만 알고 있었던 이 세 가지 함수 , , 에 대해 알아보고 실행 시점에 대한 차이를 간단하게나마 알아보고자 한다. 📄 개념 Node.js 공식 문서를 확인하면 정의는 아래와 같고, 나름대로 개념을 정리(짜집기)해보았다. 1. setTimeout()  schedules a script to be run after a minimum threshold in ms has elapsed. 지정된 시간(ms) 이후에 함수 또는 지정된 코드를 실행하는 타이머를 설정한다. 2. setImmedidate()  is designed to execute a script once the current poll phase completes. 현재 폴링 단계가 완료되면 실행된다. 작업을 비동기적으로 실행한다는 면에서는 process.nextTick()과 유사하지만, setImmedidate()는 이미 큐에 있는 I/O 이벤트들의 뒤에 대기하게 된다는 차이가 있다. 3. pr…","frontmatter":{"date":"February 06, 2022","title":"setTimeout(), setImmedidate(), process.nextTick()","categories":"javascript node.js","author":"reviday","emoji":"⏲️"},"fields":{"slug":"/setTimeout-vs-setImmedidate-vs-process.nextTick/"}},"next":null,"prev":null,"site":{"siteMetadata":{"siteUrl":"https://reviday.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/setTimeout-vs-setImmedidate-vs-process.nextTick/","nextSlug":"","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}